Cloud pops up in just event stream from anywhere at any scale reliable real time stream analytics let's

get into it clouds up pops up is a part of database and storage.

Operating from Google Cloud Platform and it is a part of big data

so we saw data proc data flow or equity as a part of Big Data Services already.

Now we need to look at cloud pops up

what is cloud pops up.

You can just stream of events anywhere at any scale reliable and real time stream analytics.

So these are the use cases or you can see this is integration framework.

If you remember or if you know typical as a integration premium over messaging framework cloud suburbs

so be a part of again that framework so offering in Google Cloud Platform.

So what you can do with cloud pops up you can do pass reporting targeting and optimization in advertising

and media syndicating market related to data streams for financial services processing devices data

for healthcare manufacturing oil gas and logistic realtime personalization in gaming.

So very well you need real time analysis.

You need messaging techniques you can use cloud above some saw how it works.

Typically if we look at you can house stream up events or events actually coming in to cloud a pub server

and pops up will work as a integration layer to send those event to the subscriber.

So there is a publisher who is publishing the events and then subscriber gets those events.

So if you look at the architecture diagram here you can take any cloud LA cloud API data flow cloud

storage computing then all of that can generate an event which will go to cloud pops up and these.

So in this case these are the publishers of those events and there are there are subscribers to you

know take those events and do an action on it.

So these are like subscribers.

So cloud pops up act as an intermediate layer to handle that that load seamlessly so typically if you

look at you house you say publisher one publisher to publishers say See those are like even generator.

You can think of these are like machines.

I would do devices.

Any applications.

Those are like translating anyway.

Those events he created in the form of message.

So these events.

So the publisher EA is generating an event as a topic A for that particular topic.

There is a subscriber XY and that subscriber takes those message and send it to the subscriber X. In

a similar fashion you have some publisher bees subscribing or sending the message to a topic B and then

there is a subscription and that subscription actually again taken by subscriber x.

So there are multiple ways you can actually do this integration in this particular case like subscriber

C is sending a message.

Of the type three and the topic sees what it is configured.

You have different subscriptions based on the content of the message.

So you have subscription Y C as well as Z C and then you will have a different message created out of

it of which will be again consumed by different subscribers.

So this is all you can actually configure pops up

typically which gives us balancing work load in the network cluster implementing asynchronous workflows

distributing event notifications a refreshing distributed caches logging to multiple system data streaming

from various processor devices.

Reliability improvement.

So if you look at why do we use pops Albright or any messaging technique.

This is a pattern software pattern that we have.

Usually what happens is there are publishers are the applications or devices or any any manufacturing

equipment like those are generating an event.

And if all you want to send this message to these two subscriber right.

Those those subscribers should be available all the time and date person to take those events.

Any failure in say subscriber y or subscribers said the message will not be delivered.

And that's where the integration framework comes in in the form of messaging or cloud pops up which

will take that hit and then store that message until it gets delivered to the subscriber at least once.

So that is the that is you know that is the responsibility of cloud Bob and that's where usually historically

we use the integration framework.

But beyond this cloud pops up take much more load and it is seamlessly you know a nonce based on your

scalability requirement.

So you do not need to launch any hardware or software for cloud pops up.

It is managed service.

You just need to create a topic and you just need to create a subscription and then you will you will

be a star.

You will be able to use it.

So this is another use case or typical use case that we have we saw data.

All right.

So Dawe is the ideal framework that you can use data flow are data proc Hadoop or a spa cluster.

For your purposes but consider this one date the data flow when there are a stream of events which are

coming in.

So it just can be done using cloud pops up.

So there are applications devices are databases based on that Bob so we'll take those events and and

it will send you to data flow and then it will be processed by any of the things for the data flow.

This is typical use case that is talked a lot in case of pops up context

so let's look at some of the features at least one delivery.

So this is getting paid at least once delivery exactly once processing.

No provisioning is required.

Scale responsively and automatically you do not need to manage any hardware multi cloud hybrid applications

and it's an open architecture.

It is integrated with other DCP services.

So you don't you do not need to build any integration at such it's an open API standard global by default.

So it is not a zonal or a regional compliance and security is in place wherever it is required.

So basics of cloud pops up so pops up has got a message.

Message is actually the content that we want to pass across from publisher to subscriber.

That is a topic if we look at topic topics you can think of.

Name audit is an entity that has got a name using which the message is published by the publisher subscription

subscription is the way winning subscriber can come and get those messages and you can define those

subscription that they know subscriber one wanted to have this particular message and that's how it

will get delivered a publisher again publishes the message subscriber and subscription.

That's where the subscriber is actually the one who is interested in the message.

OK.

Which publisher is publishing it.

Performance Well if you look at performance it is highly scalable service.

It is minus service and you do not need to worry about provisioning hardware availability.

It is highly available service from Google.

So you do not need to worry about configuring H.A. nodes or multiple nodes for your workflow.

Everything is managed from the Google and it is low latency.

Service so if you look at the scalability part you need to make sure that you are distributing the load

and because everything boils down to you know what hardware and software which is provisioned automatically

by the Google.

So if we look at scalability the numbers are the the elements which you need to look at is the number

of topics which you want to publish the number of publisher number of subscriber number up subscriptions

that we have number of messages that you are actually pushing it for those topics.

Size of the message write up the message and size up backlog for subscription and this size of the backlog

means uh if at all we say subscriber is not available at that time right.

And the message are continuously published by the publisher.

And that's where it really depends on the war.

What is the backlog for that particular subscription.

And based on that performance may be great.

The latency the amount of time it takes to acknowledge your publisher messages and the amount of time

it takes to deliver published message to a subscriber and this is the latency right.

And I'll talk about this shortly how this is done typically in pops up you'd not need to know that information

for any subscription but just an common understanding.

That's what you have.

So typically latency is major in publishers side when a publisher is publishing those message and on

the subscriber side.

When my publisher actually does send those messages to the subscriber it pops up be sending those messages

to subscriber

so basic understanding audience multiple it runs in multiple data centers.

You do not need to worry about where you are running it.

It is global by design horizontally scalable based on number of topic number of subscription and the

messages has data uplink.

And this is very important.

So there is a control plane and then there is a data plate so data play and actually forwards your messages

from different locations and has a controller which takes care of routing those messages.

So that's how data playing and controlling works published and subscribers are connected via forwarders

rule and control care playing can be updated anytime so data plane typically data plane has got a forwarders

that will follow the forwarders and maintains this message lifecycle control plane actually does too

much of work here.

If we look at so can claim connects to Pops sir but outside the data center which data center this message

should be sent based on the latency with within the data center that to distribute the load across the

forward and balance it uniformly are for uniformity of the load and stability assignment.

You can have to enable balance between consistency and uniformity output can provide the client with

ordered list of forwarders it can connect client country that allowed to take commands forwarded but

can use forward or based on the recommender connection if the connection is fail service proxy takes

care of connection optimization.

So if you look at the lifecycle how the routing is done with which data data center to choose which

node within the data center to choose if that particular connection fails then how the proxies are the

client choose the forward recommended forward or the next what word done in the list that is all done

by the control plane coming back here.

Typically when we say you know it is guaranteed delivery what do we mean by that.

So let's go in and understand.

Okay.

So publishers send a message to pops up.

So what it does is the message gets written once it is sent to pops up the publishing for Werder gets

thoughts message and writes that into the storage and this storage is not a single instance.

There are multiple instance that it gets stored and at least 50 percent of those storage instances are

stored.

Message.

You will not get that knowledge back by the to the publisher.

So one of the messages stored at least 50 percent of those instances in the storage then publisher gets

the confirmation mentioning that yeah the messages received at pubs.

And that's the first latency then messages actually taken from forwarded and gets connected to subscriber

subscriber forwarded and then subscriber for the order.

Make sure that you know that are subscribers and then delivers that message to the subscriber and winning

it actually delivers the message to multi all those subscriber then.

Mark that particular date as a complete order message delivered is complete.

And that is what it happened.

So there is acknowledgement happening from once the publisher is publishing the message in pops up.

So publishers get some like acknowledgement that the message is received and the second acknowledgement

is when subscriber.

So the message is delivered to subscribers.

That's where subscribers send 10 message to back to pops up mentioning that subscriber has received

that particular message.

There are multiple ways you can organize those subscription which we saw it already.

But do you have any questions on this one.

Let me know.

Typically you will not be asked detailed level questions inside pops up.

Well keep keep that in mind.

You just need to have common understanding how that works or that whenever there is a performance problem

you probably need to look at whether you can create a different topic based on geography based on our

subject or based on any other thoughts and you can scale it accordingly.

Okay

so there are some core doesn't limit which you need to go through and look at it.

A publisher throughput 60 million copies per minute which is like one MBP yes lines subscriber throughput

to one sorry 1000 MBP s which is like 1 GBP is subscriber throughput 2000 MBP s which is 2 GBP is push

subscription.

So look at all these numbers.

Okay.

And probably if at all there are there is a question then the question will be like Do you have any

limit on the maximum number of you know maximum throughput that you have.

Or you will get a scenario hearing you will be asked if at all a publisher currently using one G.B..

When GBP us as a 1 GBP us as a current throughput and they are not able to add additional on the publisher

capacity is not going beyond 1 GBP as then.

What is your solution.

Probably you want to look at whether you can create another topic and then publish those masses so if

at all there are questions around the scenarios you need to look at that

surprising first NGV.

So it is based on the volume of data for state G.B. 0 dollar next 50 GP 60 dollars and for poor terabyte

next hundred terabyte fifty dollars per terabyte and beyond 152 and about six forty dollars per day.

And thats it as a pops up to 80 let's go ahead and getting to the console for cloud pops up.

クラウドは、あらゆる規模のどこからでもイベントストリームにポップアップします。信頼できるリアルタイムストリーム分析

クラウドがポップアップするのは、データベースとストレージの一部です。

Google Cloud Platformで動作し、ビッグデータの一部です

そのため、データプロシージャのデータフローまたはエクイティはビッグデータサービスの一部としてすでに見られました。

今、クラウドがポップアップするのを見る必要があります

クラウドがポップアップします。

信頼性の高いリアルタイムのストリーム分析で、あらゆる規模のイベントをどこでもストリーミングできます。

これらがユースケースであるか、これが統合フレームワークであることがわかります。

覚えている場合、またはメッセージングフレームワークのクラウド郊外での統合プレミアムとして典型的なものを知っている場合

Google Cloud Platformで提供しているフレームワークに再び参加してください。

クラウドポップアップでできることは、レポートのターゲティングと広告の最適化を渡すことができます

および金融サービス処理デバイスのデータのデータストリームに関連するメディアシンジケート市場

ヘルスケア製造用の石油ガスおよびゲームのロジスティックなリアルタイムパーソナライゼーション向け。

リアルタイム分析が必要です。

クラウドを使用できるメッセージング技術が必要です。

通常、私たちが見ると、ストリームアップイベントまたは実際にパブサーバーをクラウド化するイベントを収容できます

ポップアップは、これらのイベントをサブスクライバーに送信する統合レイヤーとして機能します。

そのため、イベントを公開しているパブリッシャーがいて、サブスクライバーがそれらのイベントを取得します。

したがって、ここでアーキテクチャ図を見ると、クラウドLAクラウドAPIデータフロークラウドを使用できます。

ストレージコンピューティングは、これらすべてのイベントを生成し、クラウドにポップアップします。

この場合、これらはそれらのイベントの発行者であり、あなたへの購読者がいます

それらのイベントを取り、それに対してアクションを実行することを知っています。

したがって、これらは加入者のようなものです。

そのため、クラウドが中間層として機能し、通常は以下の場合にロードをシームレスに処理します。

あなたの家を見て、あなたは出版社と言う出版社から出版社へと言ってください。

これらは機械のようなものだと考えることができます。

私はデバイスを使います。

すべてのアプリケーション。

とにかくそれらは翻訳のようなものです。

彼がメッセージの形で作成したイベント。

これらのイベント。

そのため、パブリッシャーEAは、その特定のトピックのトピックAとしてイベントを生成しています。

サブスクライバーXYがあり、そのサブスクライバーはそれらのメッセージを取得してサブスクライバーXに送信します。

同様の方法で、トピックBにメッセージをサブスクライブまたは送信する出版社の蜂がいます。

サブスクリプションがあり、そのサブスクリプションは実際にサブスクライバxによって再び取得されます。

サブスクライバーのようなこの特定のケースで実際にこの統合を行うことができる複数の方法があります

Cはメッセージを送信しています。

タイプ3のトピックは、その構成を確認します。

メッセージの内容に基づいて異なるサブスクリプションがあります。

したがって、サブスクリプションY CとZ Cがあり、そこから異なるメッセージが作成されます。

そのうち異なるサブスクライバーによって再び消費されます。

これで、ポップアップを実際に設定できるのはこれだけです

通常、非同期ワークフローを実装するネットワーククラスターでの作業負荷の分散を可能にします

イベント通知の配信、更新された分散キャッシュ、複数のシステムデータストリーミングへのロギング

さまざまなプロセッサデバイスから。

信頼性の向上。

したがって、ポップスオルブライトやその他のメッセージング技術を使用する理由をご覧ください。

これは私たちが持っているパターンソフトウェアパターンです。

通常何が起こるかというと、出版社はアプリケーションやデバイス、または製造業者です

それらのような機器がイベントを生成しています。

そして、このメッセージをこれら2人のサブスクライバーに送信したい場合。

それらのサブスクライバーは、これらのイベントに参加するためにすべての日時の人に利用可能である必要があります。

たとえば、サブスクライバーyまたはサブスクライバーが失敗すると、メッセージは配信されません。

そして、そこからメッセージングの形で統合フレームワークが導入されるか、クラウドがポップアップします

そのヒットを受け取り、サブスクライバーに少なくとも1回配信されるまでそのメッセージを保存します。

これがクラウドボブの責任であることがわかっているということです。それは通常、歴史的に

統合フレームワークを使用します。

しかし、このクラウドのポップアップを超えると、はるかに多くの負荷がかかり、シームレスにあなたに基づいてノンスを知っています

スケーラビリティ要件。

そのため、クラウドポップアップ用のハードウェアやソフトウェアを起動する必要はありません。

マネージドサービスです。

トピックを作成するだけで、サブスクリプションを作成するだけで、次のようになります。

スターになる。

使用できるようになります。

したがって、これはデータを見た別のユースケースまたは典型的なユースケースです。

大丈夫。

Daweは、データプロシージャHadoopまたはスパクラスターであるデータフローを使用できる理想的なフレームワークです。

あなたの目的のために、しかし、あるイベントのストリームがあるとき、これがデータフローであると考えてください

入ってきます。

そのため、クラウドポップアップを使用して行うことができます。

そのため、デバイスはそのボブに基づいたデータベースであるため、これらのイベントを取得し、

データフローに送られ、データフローのいずれかによって処理されます。

これは、ポップアップコンテキストの場合によく話される典型的な使用例です。

少なくとも1つの配信でいくつかの機能を見てみましょう。

したがって、これは少なくとも1回の配信と1回の処理で支払われます。

プロビジョニングは不要です。

レスポンシブかつ自動的にスケーリングするため、ハードウェアマルチクラウドハイブリッドアプリケーションを管理する必要はありません

そして、それはオープンアーキテクチャです。

他のDCPサービスと統合されています。

したがって、デフォルトではグローバルなオープンAPI標準であるため、統合を構築する必要はありません。

したがって、それはゾーンや地域のコンプライアンスではなく、必要な場所にセキュリティが配置されています。

クラウドの基本がポップアップするので、ポップアップにメッセージが表示されます。

メッセージは、実際にはパブリッシャーからサブスクライバーに受け渡したいコンテンツです。

考えられるトピックトピックを見ると、それはトピックです。

名前監査は、発行者サブスクリプションによってメッセージが発行される名前を使用するエンティティです

購読は、勝者が来てそれらのメッセージを取得する方法であり、それらを定義することができます

購読者がこの特定のメッセージを持ちたいと思っていた購読者は、その方法です

パブリッシャーが配信され、メッセージサブスクライバーとサブスクリプションを再度公開します。

ここで、サブスクライバーが実際にメッセージに関心を持つユーザーになります。

OK。

どの出版社がそれを公開しています。

パフォーマンスパフォーマンスを見ると、非常にスケーラブルなサービスです。

マイナスサービスであり、ハードウェアの可用性のプロビジョニングについて心配する必要はありません。

Googleの高可用性サービスです。

したがって、H.Aの構成について心配する必要はありません。ワークフローのノードまたは複数のノード。

すべてがGoogleから管理され、低レイテンシです。

サービスなので、スケーラビリティの部分を見る場合は、負荷を分散していることを確認する必要があります

そして、すべてがあなたに帰着するのは、自動的にプロビジョニングされるハードウェアとソフトウェアを知っているからです

Googleによる。

スケーラビリティを見ると、数字は要素であり、見る必要がある要素は

公開するトピックの数パブリッシャーの数サブスクライバーの数アップサブスクリプション

あなたが実際にそれらのトピックのためにそれをプッシュしているメッセージの数があること。

メッセージのサイズはメッセージを書き上げ、サブスクリプションのバックログとこのサイズのバックログをサイズアップします

その時点で加入者が利用できないと言ってもまったく意味があります。

また、メッセージは発行者によって継続的に発行されます。

そして、それは本当に戦争に依存するところです。

その特定のサブスクリプションのバックログは何ですか。

そして、そのパフォーマンスに基づいて素晴らしいことがあります。

サイト運営者のメッセージを確認するのにかかる時間と時間

パブリッシュされたメッセージをサブスクライバーに配信するのに時間がかかります。これは待ち時間です。

これについては、ポップアップで通常どのように行われるかについて簡単に説明しますが、その情報を知る必要はありません

サブスクリプションについてですが、一般的な理解だけです。

それはあなたが持っているものです。

そのため、通常、パブリッシャーがこれらのメッセージをパブリッシュしているときに、パブリッシャー側でレイテンシが大きくなります。

加入者側。

私のパブリッシャーが実際にそれらのメッセージをサブスクライバーに送信すると、ポップアップがポップアップしてそれらのメッセージを送信します

加入者へ

したがって、複数のデータセンターで実行される複数のオーディエンスの基本を理解します。

どこで実行するか心配する必要はありません。

これは、サブスクリプションのトピック番号の数と

メッセージにはデータアップリンクがあります。

これは非常に重要です。

コントロールプレーンがあり、データプレートがあるので、データが再生され、実際にメッセージが転送されます

別の場所から、それらのメッセージのルーティングを処理するコントローラーを持っています。

データの再生と制御が公開され、サブスクライバーがフォワーダーを介して接続される仕組みです。

ルールとコントロールケアのプレイはいつでも更新できるため、通常、データプレーンにはフォワーダーがあります

フォワーダーを追跡し、このメッセージライフサイクルコントロールプレーンを実際に維持します

ここでの作業の多く。

そう考えれば、このメッセージはPops sirに接続できますが、このメッセージはデータセンターの外にあり、このメッセージはこのメッセージ

負荷を分散するデータセンター内の遅延に基づいて送信する必要があります

フォワードとバランスは、負荷の均一性と安定性の割り当てのためです。

一貫性と均一性の間のバランスを有効にする必要があります。

フォワーダーの順序付きリスト。転送されたコマンドの実行を許可したクライアント国に接続できますが、

接続が失敗した場合、フォワードまたは推奨接続に基づいて使用できます

接続の最適化のケア。

ライフサイクルを見ると、どのデータデータセンターを使用してルーティングが行われ、どのデータセンターを選択するのか

特定の接続が失敗した場合にプロキシがどのように動作するかを選択するデータセンター内のノード

クライアントは、推奨される転送順、またはリスト内で完了した次の単語を選択します。

ここに戻ってくるコントロールプレーンによって。

通常、配信が保証されていることがわかっている場合、それはどういう意味ですか。

さあ、理解しましょう。

はい。

そのため、パブリッシャーはポップアップにメッセージを送信します。

そのため、メッセージが送信されると、Werderのパブリッシングがポップアップ表示されます

思考メッセージとそれをストレージに書き込み、このストレージは単一のインスタンスではありません。

格納されるインスタンスは複数あり、それらのストレージインスタンスの少なくとも50％は

格納されます。

メッセージ。

出版社にその知識を取り戻すことはありません。

そのため、メッセージの1つがそれらのインスタンスの少なくとも50％をストレージに保存し、パブリッシャーが取得します

パブで受信したメッセージについての確認。

そして、それが最初のレイテンシーであり、メッセージは実際に転送から取得され、サブスクライバーに接続されます

サブスクライバーが転送してから、オーダーのサブスクライバー。

購読者であることを確認してから、そのメッセージを購読者に配信し、勝者にします。

実際には、それらすべてのサブスクライバーにメッセージを配信します。

配信された注文完了メッセージが完了したことを特定の日付にマークします。

そして、それはそれが起こったことです。

そのため、パブリッシャーがポップアップでメッセージをパブリッシュすると、確認が発生します。

したがって、パブリッシャーは、メッセージが受信されたことと2番目の確認応答のような確認を受け取ります。

加入者です。

したがって、メッセージはサブスクライバーに配信されます。

ここで、サブスクライバーは10個のメッセージを送信して、そのサブスクライバーが受信したことを示すポップアップを表示します

その特定のメッセージ。

すでに見たサブスクリプションを整理する方法は複数あります。

しかし、これに関する質問はありますか。

お知らせ下さい。

通常、ポップアップ内で詳細なレベルの質問は表示されません。

それを覚えておいてください。

あなたはそれがどのように機能するか、またはパフォーマンスの問題があるときはいつでもそれを理解する必要があります

あなたはおそらくあなたが私たちに基づいて地理に基づいて別のトピックを作成できるかどうかを調べる必要があります

件名または他の考えに基づいて、それに応じてスケーリングすることができます。

はい

そのため、いくつかのコアが制限されていないので、それを調べて確認する必要があります。

パブリッシャーのスループットは1分あたり6,000万コピーで、1 MBPがyesサブスクライバーのスループットに匹敵します

1つのGBPのような1つの残念な1000 MBPは、サブスクライバーのスループットである2000 MBPは2 GBPです

サブスクリプション。

したがって、これらすべての数字を見てください。

はい。

おそらく質問がある場合、おそらく質問は次のようになります

あなたが持っている最大スループットの最大数の制限。

または、現在1つのG.B.を使用しているパブリッシャーがあるかどうかを尋ねられるというシナリオを聞くことができます。

GBPが現在のスループットとして1 GBPであり、パブリッシャーに追加できない場合

当時の容量は1 GBPを超えていません。

あなたのソリューションは何ですか。

おそらく、別のトピックを作成してからそれらの大衆を公開できるかどうかを見たいと思うでしょう。

あなたがそれを見なければならないシナリオの周りに質問があります

驚くべき最初のNGV。

そのため、州G.Bのデータ量に基づいています。 0 GP次の50 GP 60ドル、貧弱なテラバイト

次の100テラバイトは1テラバイトあたり50ドルで、152を超え、1日あたり約60ドルです。

80以上のポップアップが表示されたら、クラウドポップアップ用のコンソールにアクセスしてみましょう。
