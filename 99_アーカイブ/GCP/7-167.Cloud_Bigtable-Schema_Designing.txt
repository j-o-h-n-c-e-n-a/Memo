Scheme designing.

We are not going in details up schema designing in at least this particular section because we are very

limiting ourselves to basics and not going in details.

If you want to look at the scheme by designing for each base it would be same applicable to big table

as well.

And if you look at the way it's stable you ward it was based on the foundation for Big H bases a big

table and big table was launched very early and then based on the big table it was created.

So that's the foundation.

So you can go and check how you can design the scheme up for each base but high level consultation that

you need to make is each tool table has only one index and that is the real key and that is the column

oriented databases which we know of rows are sorted in lexical graphical by Rocky all operations are

atomic at the raw level.

You cannot merge together read and write should identically be distributed evenly across the raw space

of a table.

In general keep all the information for an entity in a single row.

Related entities should be stored in adjacent rows and big tables.

Tables are sparse tables it is not compact tables so you just need to keep that in mind if at all you

want to you know go and browse what is column or database and what advantage it provides you can just

call and search it.

Column databases versus row databases and you can find on dates and thousands of documents that you

can do good and read the documents all you can just go ahead and check the YouTube channels and you

will find there are so many videos out there and that's why I'm not going into it.

Okay that's it.

As this came out designing I'm not going in detail but we are going to see some of the details in the

data.

Engineer certifications because it is very much required there.

Okay.

If you have any questions here let us know otherwise you can move to the next lecture.

Thank you.


スキーム設計。

少なくともこの特定のセクションでは、スキーマ設計について詳しく説明しません。

自分自身を基本に限定し、詳細に説明しない。

各ベースを設計することでスキームを確認したい場合は、大きなテーブルにも適用できます

同様に。

そして、それが安定している方法を見れば、それはビッグHの基盤に基づいていました

テーブルと大きなテーブルは非常に早い段階で起動され、作成された大きなテーブルに基づいて作成されました。

それが基礎です。

したがって、各ベースのスキームをどのように設計できるかを確認できますが、

作成する必要があるのは、各ツールテーブルにインデックスが1つだけあり、それが実際のキーであり、それが列であることです

行を知っている指向データベースは、すべての操作がロッキーによって字句グラフィカルにソートされます

生レベルでのアトミック。

読み込みと書き込みを一緒にマージすることはできません。同じようにrawスペース全体に均等に分散してください。

テーブルの。

一般に、エンティティのすべての情報を単一の行に保持します。

関連するエンティティは、隣接する行と大きなテーブルに保存する必要があります。

テーブルはまばらなテーブルであり、コンパクトなテーブルではありません。

知ってもらいたいのは、列またはデータベースとは何か、それが提供する利点を参照してください

電話して検索してください。

列データベースと行データベースを比較すると、日付と何千ものドキュメントを見つけることができます

良いことをしてドキュメントを読むことができます。先に進み、YouTubeチャンネルと

そこには非常に多くのビデオがあり、それが私がそれに入らない理由です。

わかった

これが設計の結果として出てきたので、私は詳細には行きませんが、

データ。

エンジニア認定は非常に必要なためです。

はい。

ここで質問がある場合はお知らせください。それ以外の場合は、次の講義に移動できます。

ありがとうございました。