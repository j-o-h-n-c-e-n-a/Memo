Low destruction algorithm thought is low distribution algorithm.

It takes the request from the user and depends on the parameter which you can configure it.

It will distribute the traffic to the backend services and where you can configure it

so you can go ahead and configure load distribution I'll get it done.

Here.

Okay so it's a part of back in properties right.

Because it is distributing traffic to the backend services.

This is where you can configure the load distribution algorithm so that it is utilization are the read

the number of requests which sends to the backend system.

You can define the balancing mode and that is how that rule load get distributed to the backend instances

so you can have either the utilization or the rate number of request for instance which goes to the

backend and you can configure that.

So if it is simple utilization then you can configure homemade zip utilization you need to consider

while distributing the load if it is rate per second then you will mark how many request which back

and it's servicing and then you can define the capacity and all that right.

That's the load distribution algorithm which you can use it in a steady load balancer so its GDP is

to the base load balancing projects to method to determining instance load and this is balancing more

requests per second and repudiation mutilation of the back end instances and which uses which is to

be load balancer uses to distribute the load among the backend.

Let's look at the station affinity how user if the user is you know being using your web application

and then it is sold by you know multiple back and instances you need to make sure that it is an debt

to one particular back in instance continuously so that you are caching and all that mechanism work

seamlessly.

Let's look at that in the next lecture.


低破壊アルゴリズムの考えは、低分散アルゴリズムです。

ユーザーからのリクエストを受け取り、設定可能なパラメーターに依存します。

トラフィックをバックエンドサービスに配信し、どこで設定できるか

そのため、負荷分散を構成して先に進みます。

ここに。

さて、プロパティのバックの一部です。

バックエンドサービスにトラフィックを分散しているためです。

ここで、負荷分散アルゴリズムを構成して、使用率が読み取られるようにします。

バックエンドシステムに送信するリクエストの数。

バランシングモードを定義できます。これにより、ルールの負荷がバックエンドインスタンスに分散されます。

そのため、たとえば、利用率またはリクエストのレート番号を取得して、

バックエンドを設定します。

単純な利用であれば、自家製のzip利用を設定することができます。

負荷が1秒あたりのレートである場合、負荷を分散しながら、どれだけ多くのリクエストを返すかをマークします

そしてそれはサービスであり、それからあなたは能力とすべての権利を定義することができます。

これは、安定したロードバランサーで使用できる負荷分散アルゴリズムであるため、GDPは

インスタンスの負荷を決定する方法へのベース負荷分散プロジェクトに、これはより多くのバランスを取っています

1秒あたりのリクエストと、バックエンドインスタンスの否認、およびどちらを使用するか

ロードバランサーがバックエンド間で負荷を分散するために使用します。

ユーザーがWebアプリケーションを使用していることがわかっている場合、どのようにユーザーがステーションアフィニティを見てみましょう

そして、それはあなたによって販売されています複数のバックとあなたがそれが借金であることを確認する必要があるインスタンスを知っている

インスタンス内の特定の1つに継続的にキャッシュすることで、すべてのメカニズムが機能します

シームレスに。

次の講義でそれを見てみましょう。

